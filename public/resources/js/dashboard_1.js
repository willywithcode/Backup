/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/dashboard_1.js":
/*!*************************************!*\
  !*** ./resources/js/dashboard_1.js ***!
  \*************************************/
/***/ (() => {

eval("\n\nvar from = moment().subtract(10, 'days').format('YYYY-MM-DD');\nvar to = moment().format('YYYY-MM-DD');\n\n// Init flatpickr --- more info :https://flatpickr.js.org/getting-started/\nvar initFlatpickr = function initFlatpickr() {\n  var element = document.querySelector('#kt_ecommerce_sales_flatpickr');\n  flatpickr = $(element).flatpickr({\n    altInput: true,\n    altFormat: \"d/m/Y\",\n    dateFormat: \"Y-m-d\",\n    defaultDate: [from, to],\n    locale: {\n      rangeSeparator: ' - '\n    },\n    mode: \"range\",\n    onChange: function onChange(selectedDates, dateStr, instance) {\n      handleFlatpickr(selectedDates, dateStr, instance);\n    }\n  });\n};\nvar chart = null;\nvar initChart = function initChart(fromDate, toDate) {\n  var element = document.getElementById(\"kt_charts_widget_dashboard_3\");\n  if (!element) {\n    return;\n  }\n  var height = parseInt(KTUtil.css(element, 'height'));\n  var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n  var borderColor = KTUtil.getCssVariableValue('--bs-border-dashed-color');\n  var baseColor = KTUtil.getCssVariableValue('--bs-success');\n  var lightColor = KTUtil.getCssVariableValue('--bs-success');\n  $.ajax({\n    type: 'GET',\n    url: \"/report/sales?from=\".concat(fromDate, \"&to=\").concat(toDate),\n    success: function success(res) {\n      var options = {\n        series: [{\n          name: 'Doanh thu',\n          data: res.data\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.3,\n            opacityTo: 0.7,\n            stops: [0, 90, 100]\n          }\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: res.dates,\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          tickAmount: 6,\n          labels: {\n            rotate: 0,\n            rotateAlways: true,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            position: 'front',\n            stroke: {\n              color: baseColor,\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          tickAmount: 4,\n          labels: {\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            },\n            formatter: function formatter(val) {\n              return Number(val / 1000).toFixed(1) + \"K\";\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return Number(val / 1000).toFixed(1) + \"K\";\n            }\n          }\n        },\n        colors: [lightColor],\n        grid: {\n          borderColor: borderColor,\n          strokeDashArray: 4,\n          yaxis: {\n            lines: {\n              show: true\n            }\n          }\n        },\n        markers: {\n          strokeColor: baseColor,\n          strokeWidth: 3\n        }\n      };\n      chart = new ApexCharts(element, options);\n\n      // Set timeout to properly get the parent elements width\n      setTimeout(function () {\n        chart.render();\n      }, 300);\n    }\n  });\n};\n\n// Handle flatpickr --- more info: https://flatpickr.js.org/events/\nvar handleFlatpickr = function handleFlatpickr(selectedDates, dateStr, instance) {\n  var _dates$, _dates$2;\n  var dates = dateStr.split(' - ');\n  var fromDate = (_dates$ = dates[0]) !== null && _dates$ !== void 0 ? _dates$ : null;\n  var toDate = (_dates$2 = dates[1]) !== null && _dates$2 !== void 0 ? _dates$2 : null;\n  if (fromDate && toDate) {\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var baseColor = KTUtil.getCssVariableValue('--bs-success');\n    $.ajax({\n      type: 'GET',\n      url: \"/report/sales?from=\".concat(fromDate, \"&to=\").concat(toDate),\n      success: function success(res) {\n        chart.updateOptions({\n          series: [{\n            data: res.data\n          }],\n          xaxis: {\n            categories: res.dates,\n            axisBorder: {\n              show: false\n            },\n            axisTicks: {\n              show: false\n            },\n            tickAmount: 6,\n            labels: {\n              rotate: 0,\n              rotateAlways: true,\n              style: {\n                colors: labelColor,\n                fontSize: '12px'\n              }\n            },\n            crosshairs: {\n              position: 'front',\n              stroke: {\n                color: baseColor,\n                width: 1,\n                dashArray: 3\n              }\n            },\n            tooltip: {\n              enabled: true,\n              formatter: undefined,\n              offsetY: 0,\n              style: {\n                fontSize: '12px'\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n};\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  initFlatpickr();\n  initChart(from, to);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/dashboard_1.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/dashboard_1.js"]();
/******/ 	
/******/ })()
;